# -*- coding: utf-8 -*-
"""custom named entity recognizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yThF5vgiUL1TjssfaCE7XS0_US6WYgQs

# seeks to locate in classified entities within the given corpus. it can be locationsn names anything. etcc

There are some pre defined entities in the model actually, but there will be a situation where we needs to train our own entity asper the domain.
"""

import spacy

nlp = spacy.load('en_core_web_sm')
nlp.pipe_names

"""tagger parser and named entity recogniser

# lets look at the example
"""

doc = nlp("Australia wants to force Facebook and Google to pay media companies for news")

for ent in doc.ents:
  print(ent.text, ent.start_char, ent.end_char, ent.label_)

"""It is ok now, but what if we want some of our custom named entities to be also identified as entities especially in financial and banking domains."""

doc = nlp("I do not have money to pay my credit card account")

for ent in doc.ents:
  print(ent.text, ent.start_char, ent.end_char, ent.label_)

"""# no entity in this statement """

doc = nlp("what is the process to open a new savings account")

for ent in doc.ents:
  print(ent.text, ent.start_char, ent.end_char, ent.label_)

"""again no entity in this text as well.

here saving account and credit card is a product the bank have and payment and open is an activity.

So, need to train for this custome elements

so, i am going to train a model for all this to be sorted out.
"""

train = [
         ("Money transfer from my checking account is not working", {"entities": [(6, 13, "Activity"), (23, 39, 'Product')]}),
         (" I want to check balance in my savings account", {"entities": [(16, 23, "Activity"), (30, 45, 'Product')]}),
         ("I suspect a fraud in my credit card account", {"entities": [(12, 17, "Activity"), (24, 35, 'Product')]}),
         ("I am here for opening a new savings account", {"entities": [(14, 21, "Activity"), (28, 43, 'Product')]}),
         ("Your credit card is in past due status", {"entities": [(23, 31, "Activity"), (5, 16, 'Product')]})
]

nlp.pipe_names

ner = nlp.get_pipe("ner")

for _,annotations in train:
  for ent in annotations.get("entities"):
    ner.add_label(ent[2])

"""now we need t add these custome made to the ner """

# disabling all the pipelines, if the pipeline not equal to ner,assign it to the disable pipes

disable_pipes = [pipe for pipe in nlp.pipe_names if pipe!='ner']

import random
from spacy.util import minibatch, compounding
from pathlib import Path

with nlp.disable_pipes(*disable_pipes):
  optimizer = nlp.resume_training()

  for iteration in range(100):

    random.shuffle(train)
    losses = {}

    batches = minibatch(train, size=compounding(1.0, 4.0, 1.001))
    for batch in batches:
      text, annotation = zip(*batch)
      nlp.update(
          text, annotation, drop = 0.5, losses = losses, sgd = optimizer 
      )
      print("Losses", losses)

for text, _ in train:
  doc = nlp(text)
  print("Entities", [(ent.text, ent.label_) for ent in doc.ents])

"""feeding more data would definitely do."""

from spacy import displacy

doc = nlp("what is the process to open a new credit card")

for ent in doc.ents:
  print(ent.text, ent.start_char, ent.end_char, ent.label_)

displacy.render(nlp(doc.text), style = 'ent', jupyter = True)

doc = nlp("My credit card payment will be past due status")
for ent in doc.ents:
  print(ent.text, ent.start_char, ent.end_char, ent.label_)

"""It is doing some decent job with the very less data we feeded in."""

doc = nlp("Australia wants to force Facebook and Google to pay media companies for news")
for ent in doc.ents:
  print(ent.text, ent.start_char, ent.end_char, ent.label_)

"""here comes the check, now it is not recgnisizing the facebbok and google as organizations, this is due to the forgetting of the model. rfere the site " https://explosion.ai/blog/pseudo-rehearsal-catastrophic-forgetting "

in tis case what we need to do is we need to take the existing data and train it along with the new data. It is a known issue in spacy and other nlp packages.

also, we can have two models:
one will have empty model with our text 
and the second will be with existing models and
finally combine them and show
"""











